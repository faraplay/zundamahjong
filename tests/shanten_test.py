import unittest

from src.mahjong.shanten import suit_shanten_data


class ShantenTest(unittest.TestCase):
    def test_shanten_1(self):
        data = suit_shanten_data([1])
        self.assertEqual(
            data,
            {
                0 * 2 + 0: [0, 0b000_000_000],
                0 * 2 + 1: [1, 0b100_000_000],
                1 * 2 + 0: [1, 0b111_000_000],
                1 * 2 + 1: [0, 0b000_000_000],
                2 * 2 + 0: [0, 0b000_000_000],
                2 * 2 + 1: [0, 0b000_000_000],
                3 * 2 + 0: [0, 0b000_000_000],
                3 * 2 + 1: [0, 0b000_000_000],
                4 * 2 + 0: [0, 0b000_000_000],
                4 * 2 + 1: [0, 0b000_000_000],
            },
        )

    def test_shanten_5(self):
        data = suit_shanten_data([5])
        self.assertEqual(
            data,
            {
                0 * 2 + 0: [0, 0b000_000_000],
                0 * 2 + 1: [1, 0b000_010_000],
                1 * 2 + 0: [1, 0b001_111_100],
                1 * 2 + 1: [0, 0b000_000_000],
                2 * 2 + 0: [0, 0b000_000_000],
                2 * 2 + 1: [0, 0b000_000_000],
                3 * 2 + 0: [0, 0b000_000_000],
                3 * 2 + 1: [0, 0b000_000_000],
                4 * 2 + 0: [0, 0b000_000_000],
                4 * 2 + 1: [0, 0b000_000_000],
            },
        )

    def test_shanten_34(self):
        data = suit_shanten_data([3, 4])
        self.assertEqual(
            data,
            {
                0 * 2 + 0: [0, 0b000_000_000],
                0 * 2 + 1: [1, 0b001_100_000],
                1 * 2 + 0: [2, 0b010_010_000],
                1 * 2 + 1: [2, 0b111_111_000],
                2 * 2 + 0: [2, 0b111_111_000],
                2 * 2 + 1: [0, 0b000_000_000],
                3 * 2 + 0: [0, 0b000_000_000],
                3 * 2 + 1: [0, 0b000_000_000],
                4 * 2 + 0: [0, 0b000_000_000],
                4 * 2 + 1: [0, 0b000_000_000],
            },
        )

    def test_shanten_2344(self):
        data = suit_shanten_data([2, 3, 4, 4])
        self.assertEqual(
            data,
            {
                0 * 2 + 0: [0, 0b000_000_000],
                0 * 2 + 1: [2, 0b000_000_000],
                1 * 2 + 0: [3, 0b000_000_000],
                1 * 2 + 1: [4, 0b100_100_000],
                2 * 2 + 0: [4, 0b111_111_000],
                2 * 2 + 1: [4, 0b111_111_000],
                3 * 2 + 0: [4, 0b111_111_000],
                3 * 2 + 1: [4, 0b111_111_000],
                4 * 2 + 0: [4, 0b111_111_000],
                4 * 2 + 1: [0, 0b000_000_000],
            },
        )

    def test_shanten_233444556(self):
        data = suit_shanten_data([2, 3, 3, 4, 4, 4, 5, 5, 6])
        self.assertEqual(
            data,
            {
                0 * 2 + 0: [0, 0b000_000_000],
                0 * 2 + 1: [2, 0b000_000_000],
                1 * 2 + 0: [3, 0b000_000_000],
                1 * 2 + 1: [5, 0b000_000_000],
                2 * 2 + 0: [6, 0b000_000_000],
                2 * 2 + 1: [7, 0b111_111_100],
                3 * 2 + 0: [9, 0b000_000_000],
                3 * 2 + 1: [9, 0b111_111_100],
                4 * 2 + 0: [9, 0b111_111_110],
                4 * 2 + 1: [9, 0b111_111_110],
            },
        )

    def test_shanten_times_1000(self):
        datas = []
        for _ in range(1000):
            datas.append(suit_shanten_data([2, 3, 3, 4, 4, 4, 5, 5, 6]))

    def test_shanten_long_times_1000(self):
        datas = []
        for _ in range(1000):
            datas.append(
                suit_shanten_data(
                    [2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 9, 9, 9]
                )
            )
